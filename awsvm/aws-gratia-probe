#!/usr/bin/env python
import gratia.common.Gratia as Gratia
import gratia.common.GratiaCore as GratiaCore
import gratia.common.GratiaWrapper as GratiaWrapper
from gratia.common.Gratia import DebugPrint, Error
import boto3;
from boto3.session import Session
from pprint import pprint;
import datetime
from time import mktime
import time
import sys
from gratia.awsvm.spot_price_multi import spot_price
from gratia.awsvm.cpuutil_multi import cpuUtilization
from gratia.awsvm.get_account_id_multi import get_account_id
from gratia.awsvm.demand_data import AwsDemandData
import os

class Awsgratiaprobe:
    def __init__(self):
        GratiaCore.Config.set_DebugLevel(5)

        self._load_static()

    def _load_static(self):
        self.instance_details = AwsDemandData()
        url=GratiaCore.Config.getConfigAttribute("HardwareDetailsURL")
        if url != "":
            try:
                DebugPrint(3,"Loading AWS instance details and pricing from URL %s"%url)
                self.instance_details.load_url(url)
            except:
                DebugPrint(2,"unable to load AWS instance details from URL, trying file")
            else:
                return

        hardwdet=GratiaCore.Config.getConfigAttribute("HardwareDetailsFile")
        try:
            DebugPrint(3,"Loading AWS instance details and pricing from file %s"%hardwdet)
            self.instance_details.load_file(hardwdet)
        except:
            Error("unable to load instance data")


    def process(self):
        #  should make account/profile list and region list configurable in ProbeConfig
        for account in ( 'rnd', 'cms', 'nova', 'fermilab' ):
            session = Session(profile_name = account)
            for region in ( 'us-west-2','us-west-1','us-east-1'):
                DebugPrint(4,"starting account/region combo")
                DebugPrint(4,"%s/%s"%(account,region))
                ec2=session.client('ec2',region_name=region)
                mygacid=get_account_id(account,region)
                owneracct=mygacid.get_id()
                DebugPrint(4,"owneracct: %s"%owneracct)
                response = ec2.describe_instances()
                resv=response['Reservations']
                for reservation in resv:
                    instances=reservation['Instances']
                    for instance in instances:
                        DebugPrint(4,"processing instance %s"% instance['InstanceId'])
                        r = Gratia.UsageRecord()
                        # set the defaults
                        user="aws account user"
                        project="aws-no project name given"
                        #voname="fermilab"
                        voname=account
                        try:
                            tags=instance['Tags']
                            DebugPrint(4,"the tags are")
                            for tag in tags:
                                DebugPrint(4,"%s: %s"%(tag['Key'],tag['Value']))
                                if tag['Key'].lower() == 'user':
                                    user=tag['Value']
                                elif tag['Key'].lower() == 'name':
                                    r.JobName(tag['Value'])
                                elif tag['Key'].lower() == 'project':
                                    project=tag['Value']
                                elif tag['Key'].lower() in ['vo', 'voname']:
                                    voname=tag['Value']
                        except KeyError:
                            DebugPrint(4, 'no tags')
                        r.LocalUserId(user)
                        r.GlobalUsername(owneracct)
                        r.ProjectName(project)
                        r.VOName(voname)
                        r.ReportableVOName(voname)
                        #Public Ip address is retrieved if instance is running"
                        try:
                            r.MachineName(instance['PublicIpAddress'],instance['ImageId'])    
                        except KeyError:
                            r.MachineName("no Public ip as instance has been stopped",instance['ImageId'])


                        r.LocalJobId(instance['InstanceId'])
                        r.GlobalJobId(instance['InstanceId']+"#"+repr(time.time()))
                
                        state=instance['State']
                        #set the default status
                        status=1
                        if state['Name']=="running":
                            status=0
                        else:
                            status=1
                        description=instance['StateTransitionReason']    
                        r.Status(status,description)
                
                        try:
                            r.Host(instance['PrivateIpAddress'],False,instance['Placement']['AvailabilityZone'])
                            r.SubmitHost(instance['PrivateIpAddress'],instance['Placement']['AvailabilityZone'])    
                        except KeyError:
                            r.SubmitHost("no Private ip as instance has been terminated")
                        r.ResourceType('aws')
                        r.Njobs(1,"The no of jobs running at a time")
                        r.NodeCount(1) # default to total


                        processor='1'
                        memory=''
                        price=0.0
                        try:
                            i = self.instance_details.instance_data(region,instance['InstanceType'])
                        except KeyError:
                            DebugPrint(1,"instance pricing and data not found for type %s in region %s"%(instance['InstanceType'],region))
                            processor=0
                            memory=0
                            price=0
                        else:
                            processor=i['cpu']
                            memory=i['memory']
                            price=i['price']
                        cpu=float(processor)
                        r.Processors(int(cpu),0,"total",instance['InstanceType'])
                        r.Memory(float(memory))
                        chargedesc=""
                        # Spot price is retrieved using instance id as the charge per hour of that instance in the last hour
                        if "SpotInstanceRequestId" in instance.keys():
                            sp=spot_price(account,region)
                            value=sp.get_price(instance['InstanceId'])
                            price=value
                            chargedesc="The instance is a on-demand instance hence charge is fixed per hour"
                        if status==1:
                            price=0
                            chargedesc="The spot price charged in last hour corresponding to launch time"
                        r.Charge(str(price),"$","$/instance hr",chargedesc)
                        # The Time period for which the spot price and other values are calculated is noted down
                        launchtime=instance['LaunchTime']
                        minu=launchtime.minute
                
                        currtime=time.time()
            
                                
                        EndTime=datetime.datetime.now()
                        EndTime=EndTime.replace(minute=minu)
                        StartTime=EndTime.replace(hour=(EndTime.hour-1))
                        t=StartTime.date()
                        stime=time.mktime(StartTime.timetuple())
                        r.StartTime(stime)
                        
                        et=EndTime.date()
                        etime=time.mktime(EndTime.timetuple())
                        r.EndTime(etime)
                        r.WallDuration(etime-stime)
                        Cpu=cpuUtilization(account,region)
                        aver=Cpu.getUtilPercent(instance['InstanceId'])
                        if aver is None:
                            cpuUtil=0.0
                            DebugPrint(4, "The CPU Utilization value is NULL as the instance was not running in the last hour")
                            r.CpuDuration(0,'user')
                        else:
                            cpuUtil=aver
                            r.CpuDuration((etime-stime)*float(aver)*cpu/100,'user')
                            r.CpuDuration(0,'system')
                            r.ResourceType("AWSVM")
                        r.AdditionalInfo("Version","1.0")
            
                        Gratia.Send(r)
                
            


if __name__ == '__main__':
    try:
        Gratia.Initialize('/etc/gratia/awsvm/ProbeConfig')
        GratiaWrapper.CheckPreconditions()
        vmProbe=Awsgratiaprobe()
        Filelock="filelock"
        conf=GratiaCore.Config
        duplicatelock=conf.getConfigAttribute("ExemptDuplicates")
        filelock=conf.getConfigAttribute("DuplicateFilelock")
        if  duplicatelock == "True":
            if os.path.isfile(Filelock):
                fl=open(Filelock, 'r+')
                date=datetime.datetime.now()
                line=fl.readline()
                prevdate = datetime.datetime.strptime(line, "%Y-%m-%d %H:%M:%S.%f")
                currtime=time.mktime(date.timetuple())
                prevtime=time.mktime(prevdate.timetuple())
                diff=currtime-prevtime
                if diff>=3599.0:
                    fl.seek(0, 0)
                    fl.truncate()
                    fl.write(str(date));
                    t = os.path.getmtime(Filelock)
                    fl.close()
                    vmProbe.process()    
                else:
                    DebugPrint(1, "probe was run less than one hour ago, please wait %d s"%(3600-diff))
                    fl.close()
            else:
                fl=open(Filelock,'w+')
                date=str(datetime.datetime.now())
                fl.write(date);
                fl.close()
                vmProbe.process()
        else:
            vmProbe.process()
    except Exception, e:
        Error(e)
        sys.exit(1)
    sys.exit(0)    

